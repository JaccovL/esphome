
esphome:
  name: ext-comp
  friendly_name: ext_comp
  build_path: /config/esphome/build/ext_comp
  platformio_options:
    platform: https://github.com/platformio/platform-espressif32/archive/refs/tags/v6.6.0.zip
  includes:
    - my_custom_component.h
    - zb_defs.h
    - zb_device.h
    - zb_device.cpp
    - zb_zcl.h
    - zb_zcl.cpp
    - zbesp_runtime.h
    - zbesp_runtime.cpp

esp32:
  board: esp32-c6-devkitc-1
  flash_size: 8MB
  partitions: partitions_zb.csv
  framework:
    type: esp-idf
    version: 5.2.1
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_8MB: y
      CONFIG_ZB_ENABLED: y
      CONFIG_ZB_ZED: y
      CONFIG_ZB_RADIO_NATIVE: y
      ZB_ED_ROLE: y
  variant: esp32c6

external_components:
  - source: github://luar123/esphome@fix_logger
    components: [ logger ]
          
logger:
  level: DEBUG
  hardware_uart: UART0

light:
  - platform: esp32_rmt_led_strip
    id: light_1
    rgb_order: GRB
    pin: GPIO8
    num_leds: 4
    rmt_channel: 0
    chipset: ws2812
    name: "My Light"
    on_turn_on:
      then:
        - lambda: |-
            static_cast<ZbAttributeComponent*>(id(zaOnOff))->setValue(1);
    on_turn_off:
      then:
        - lambda: |-
            static_cast<ZbAttributeComponent*>(id(zaOnOff))->setValue(0);

binary_sensor:
  - platform: gpio
    name: btn1
    pin: 
      number: GPIO9
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on: 30ms
      - delayed_off: 30ms         
    on_press:
      then:
        - light.toggle: light_1

sensor:
  - platform: template
    id: on_off_sensor
    on_value:
      then:
        - lambda: |-
            if (x) {
              auto call = id(light_1).turn_on();
              call.perform();
            }
            else {
              auto call = id(light_1).turn_off();
              call.perform();
            }
            
custom_component:
- lambda: |-
    auto zbDevice = new ZbDeviceComponent(ESP_ZB_DEVICE_TYPE_ED);
    auto zbEndpoint1 = new ZbEndpointComponent(zbDevice, 1, ESP_ZB_AF_HA_PROFILE_ID, ESP_ZB_HA_TEST_DEVICE_ID);
    auto zcBasic = new ZbBasicClusterComponent(zbEndpoint1, "MEA", "relay1", 1, 4);
    auto zcOnOff = new ZbClusterComponent(zbEndpoint1, ESP_ZB_ZCL_CLUSTER_ID_ON_OFF, ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);
    auto zaOnOff = new ZbAttributeComponent(zcOnOff, ESP_ZB_ZCL_ATTR_ON_OFF_ON_OFF_ID, (uint8_t) 0);
    zaOnOff->registerSensor(id(on_off_sensor));
    auto zbRuntime = new ZbRuntimeComponent();
    zbRuntime->init(zbDevice, true);
    return {zbDevice, zaOnOff, zbRuntime};
  components:
    - id: zbDevice
    - id: zaOnOff
    - id: zbRuntime

